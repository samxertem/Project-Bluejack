import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

class Card {
    private String value;
    private String color;

    public Card(String value, String color) {
        this.value = value;
        this.color = color;
    }

    public String getValue() {
        return value;
    }

    public String getColor() {
        return color;
    }

    public String toString() {
        return color + " " + (value != null ? value : "");
    }
}

public class TheGame {
    private Random rd = new Random(System.currentTimeMillis());
	
	
	 private static int sumCardValues(Card[] cards) {
        int sum = 0;
        for (Card card : cards) {
            if (card != null && isNumeric(card.getValue())) {
                sum += Integer.parseInt(card.getValue());
            }
        }
        return sum;
    }
	
	private static boolean isNumeric(String str) {
    try {
        Integer.parseInt(str);
        return true;
    } catch (NumberFormatException e) {
        return false;
    }
}

	private static void applyDoublerSpecialCard(String[] board) {
    for (int i = 0; i < board.length; i++) {
        if (!board[i].equals("")) {
            // Double the value of each non-empty card
            String[] parts = board[i].split(" ");
            int value = Integer.parseInt(parts[1]);
            value *= 2;
            board[i] = parts[0] + " " + value;
        }
    }
}


    public void shuffle(Card[] cards, Random randomGenerator) {
        for (int i = cards.length - 1; i > 0; i--) {
            int index = randomGenerator.nextInt(i + 1);
            Card temp = cards[i];
            cards[i] = cards[index];
            cards[index] = temp;
        }
    }

    private static String getRandomColor() {
        String[] colors = {"Green", "Red", "Yellow", "Blue"};
        int colorSelector = new Random().nextInt(colors.length);
        return colors[colorSelector];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Welcome to the Bluejack Game!");
        System.out.println("|--------------------------------|");
        TheGame game = new TheGame();

        Card[] cards = new Card[40];

        // Add blue cards
        for (int i = 1; i <= 10; i++) {
            cards[i - 1] = new Card(String.valueOf(i), "Blue");
        }

        // Add yellow cards
        for (int i = 1; i <= 10; i++) {
            cards[i + 9] = new Card(String.valueOf(i), "Yellow");
        }

        // Add red cards
        for (int i = 1; i <= 10; i++) {
            cards[i + 19] = new Card(String.valueOf(i), "Red");
        }

        // Add green cards
        for (int i = 1; i <= 10; i++) {
            cards[i + 29] = new Card(String.valueOf(i), "Green");
        }

        System.out.println("");

        game.shuffle(cards, game.rd);

        // Dealing cards to computer and player
        Card[] computerHandTest = new Card[10];
        Card[] playerHandTest = new Card[10];

        for (int j = 0; j < 5; j++) {
            computerHandTest[j] = cards[j];
            playerHandTest[j] = cards[35 + j];
        }

        int[] cardsWithSignsForComputer = new int[3];
        String[] colorsWithSignsForComputer = new String[3];

        for (int k = 0; k < cardsWithSignsForComputer.length; k++) {
            cardsWithSignsForComputer[k] = game.rd.nextInt(6) + 1;
            colorsWithSignsForComputer[k] = getRandomColor();

            int sign = game.rd.nextInt(100);
            if (sign > 49) {
                cardsWithSignsForComputer[k] = -cardsWithSignsForComputer[k];
            }
        }

        int[] cardsWithSignsForPlayer = new int[3];
        String[] colorsWithSignsForPlayer = new String[3];

        for (int k = 0; k < cardsWithSignsForPlayer.length; k++) {
            cardsWithSignsForPlayer[k] = game.rd.nextInt(6) + 1;
            colorsWithSignsForPlayer[k] = getRandomColor();

            int sign = game.rd.nextInt(100);
            if (sign > 49) {
                cardsWithSignsForPlayer[k] = -cardsWithSignsForPlayer[k];
            }
        }

        String[] specialCardsForPlayer = new String[2];
        String[] specialCardsForComputer = new String[2];
        String db = "Doubler";

        int randomValue = 0;

        int chance = game.rd.nextInt(5);
        if (chance == 4) {
            specialCardsForComputer[0] = "+/-";
        } else {
            randomValue = game.rd.nextInt(6) + 1;
            specialCardsForComputer[0] = getRandomColor() + " " + String.valueOf(randomValue);
        }

        // For special card 2 for computer
        int chance2 = game.rd.nextInt(5);
        if (chance2 == 4) {
            specialCardsForComputer[1] = db;
        } else {
            randomValue = game.rd.nextInt(6) + 1;
            specialCardsForComputer[1] = getRandomColor() + " " + String.valueOf(randomValue);
        }

        // For special card 1 for player
        int chance3 = game.rd.nextInt(5);
        if (chance3 == 4) {
            specialCardsForPlayer[0] = "+/-";
        } else {
            randomValue = game.rd.nextInt(6) + 1;
            specialCardsForPlayer[0] = getRandomColor() + " " + String.valueOf(randomValue);
        }

        // For special card 2 for player
        int chance4 = game.rd.nextInt(5);
        if (chance4 == 4) {
            specialCardsForPlayer[1] = db;
        } else {
            randomValue = game.rd.nextInt(6) + 1;
            specialCardsForPlayer[1] = getRandomColor() + " " + String.valueOf(randomValue);
        }

        for (int i = 0; i < cardsWithSignsForPlayer.length; i++) {
            playerHandTest[i + 5] = new Card(String.valueOf(cardsWithSignsForPlayer[i]), colorsWithSignsForPlayer[i]);
        }

        for (int i = 0; i < specialCardsForPlayer.length; i++) {
            playerHandTest[i + 8] = new Card(specialCardsForPlayer[i], "");
        }

        for (int i = 0; i < cardsWithSignsForComputer.length; i++) {
            computerHandTest[i + 5] = new Card(String.valueOf(cardsWithSignsForComputer[i]), colorsWithSignsForComputer[i]);
        }

        for (int i = 0; i < specialCardsForComputer.length; i++) {
            computerHandTest[i + 8] = new Card(specialCardsForComputer[i], "");
        }

        System.out.println(Arrays.toString(computerHandTest));
        System.out.println(Arrays.toString(playerHandTest));
        System.out.println("");

        Card[] playerHand = new Card[4];
        Card[] computerHand = new Card[4];
        int cardSelector = 0;
        int cardSelector2 = 0;
        int[] controller = new int[10];
        for (int i = 0; i < computerHand.length; i++) {
            do {
                cardSelector = game.rd.nextInt(10);
            } while (controller[cardSelector] != 0);

            controller[cardSelector] = 1;
            computerHand[i] = computerHandTest[cardSelector];

            do {
                cardSelector2 = game.rd.nextInt(10);
            } while (controller[cardSelector2] != 0);

            controller[cardSelector2] = 1;
            playerHand[i] = playerHandTest[cardSelector2];
        }

        System.out.println("PLAYERHAND: " + Arrays.toString(playerHand));
        System.out.println("PLAYERBOARD: ");
        System.out.println("");
        System.out.println("COMPUTERHAND: X X X X ");
        System.out.println("COMPUTERBOARD: ");


        boolean wincondition = false;
        int computerBoardCard = 0;
        int playerBoardCard = 0; // Initialize playerBoardCard
        Card[] playerBoard = new Card[9];
        Card[] computerBoard = new Card[9];
        int[] controller3 = new int[40]; // Use the existing controller array
        int[] controller4 = new int[40];
        int select2 = 0;
        int select1 = 0; // Initialize select1
        int cardSelector3 = 0;
        int cardSelector4 = 0;
		boolean playersturn=false;
		
          while (!playersturn) {
            System.out.println("--------------------------------");
            System.out.println("Select your move!");
            System.out.println("1. Draw   2. Stand 3. Choose From Your Deck");

            select1 = sc.nextInt();

           if (select1 == 1) {
    do {
        cardSelector3 = game.rd.nextInt(40);
    } while (controller3[cardSelector3] != 0 || cards[cardSelector3].getValue()=="");

    playerBoard[playerBoardCard] =cards[cardSelector3];
    controller3[cardSelector3] = 1;
    playerBoardCard++;

    if (playerBoard[playerBoardCard - 1].getValue()=="") {
        do {
            cardSelector3 = game.rd.nextInt(40);
        } while (controller3[cardSelector3] != 0 || cards[cardSelector3].getValue()=="");
        
        playerBoard[playerBoardCard - 1] = cards[cardSelector3];
        controller3[cardSelector3] = 1;
    }

    cards[cardSelector3] = new Card("", "");

    System.out.println("PLAYERHAND: " + Arrays.toString(playerHand));
    System.out.println("PLAYERBOARD: " + Arrays.toString(Arrays.copyOf(playerBoard, playerBoardCard)));
    System.out.println("COMPUTERBOARD: ");
    System.out.println("COMPUTERHAND: X X X X ");

	int sum = 0;
	for (Card card : playerBoard) {
    if (card != null && isNumeric(card.getValue())) {
        sum += Integer.parseInt(card.getValue());
    }
}

		   
            
       
		   }else if (select1 == 3) {
    System.out.println("Choose which card you want to play from your deck");

    int chooserfromdeck = sc.nextInt();

    if (chooserfromdeck < 1 || chooserfromdeck > playerHand.length) {
        System.out.println("Invalid choice. Please choose a number between 1 and " + playerHand.length + ".");
        playersturn = true;
        continue;
    }

    if (playerHand[chooserfromdeck - 1] == null) {
        System.out.println("Invalid choice. The selected card is not available.");
        playersturn = true;
        continue;
    }

    if (playerHand[chooserfromdeck - 1].getValue().equals("Doubler")) {
        playerBoard[playerBoardCard] = playerHand[chooserfromdeck - 1];
        playerBoardCard++;

        if (playerBoardCard > 1 && playerBoard[playerBoardCard - 2] != null) {
            int previousValue = Integer.parseInt(playerBoard[playerBoardCard - 2].getValue());
            int newValue = 2 * previousValue;
            playerBoard[playerBoardCard - 1] = new Card(String.valueOf(newValue), playerBoard[playerBoardCard - 2].getColor());
        }
		
	} else if (playerHand[chooserfromdeck-1].getValue().equals("+/-")) {
    playerBoard[playerBoardCard] = playerHand[chooserfromdeck-1];
    playerBoardCard++;
    if (playerBoardCard > 1 && playerBoard[playerBoardCard-2] != null) {
        int previousValue2 = Integer.parseInt(playerBoard[playerBoardCard - 2].getValue());
        int newValue2= previousValue2 * -1;
        playerBoard[playerBoardCard-1]= new Card(String.valueOf(newValue2), playerBoard[playerBoardCard-2].getColor());
		}

	
		
    } else if (chooserfromdeck >= 1 && chooserfromdeck <= 4) {
        playerBoard[playerBoardCard] = playerHand[chooserfromdeck - 1];
        playerBoardCard++;
    } else {
        System.out.println("Invalid choice. Please choose a number between 1 and 4.");
        playersturn = true;
        continue;
    }

		  
    System.out.println("PLAYERHAND: " + Arrays.toString(playerHand));
    System.out.println("PLAYERBOARD: " + Arrays.toString(Arrays.copyOf(playerBoard, playerBoardCard)));
    System.out.println("COMPUTERBOARD: ");
    System.out.println("COMPUTERHAND: X X X X ");
    playersturn = true;

		  }else if (select1 == 2) {
    System.out.println("Player chooses to stand, Computer's turn");
    playersturn = true;
}
		  }
		  int sumPlayerBoard = sumCardValues(playerBoard);

	System.out.println(sumPlayerBoard);
	}
}


